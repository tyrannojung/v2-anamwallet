package com.anam145.wallet.core.ui.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.QrCodeScanner
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

/**
 * ANAM Wallet Í≥µÌÜµ Ìó§Îçî Ïª¥Ìè¨ÎÑåÌä∏
 * 
 * anam-androidÏôÄ ÎèôÏùºÌïú ÎîîÏûêÏù∏:
 * - ÎÜíÏù¥: 56dp + ÏÉÅÌÉúÎ∞î Ìå®Îî© + Î∏îÎ°ùÏ≤¥Ïù∏ Ïπ©
 * - Ï¢åÏö∞ Ìå®Îî©: 24dp
 * - ÌÉÄÏù¥ÌãÄ: 24sp, Bold
 * - Î∏îÎ°ùÏ≤¥Ïù∏ ÏÉÅÌÉú Ïπ©: ÌÉÄÏù¥ÌãÄ ÏïÑÎûò ÌëúÏãú
 * 
 * @param title ÌëúÏãúÌï† ÌÉÄÏù¥ÌãÄ
 * @param showBackButton Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌëúÏãú Ïó¨Î∂Ä
 * @param onBackClick Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏΩúÎ∞±
 * @param showBlockchainStatus Î∏îÎ°ùÏ≤¥Ïù∏ ÏÉÅÌÉú ÌëúÏãú Ïó¨Î∂Ä
 * @param activeBlockchainName ÌôúÏÑ± Î∏îÎ°ùÏ≤¥Ïù∏ Ïù¥Î¶Ñ
 * @param onBlockchainClick Î∏îÎ°ùÏ≤¥Ïù∏ Ïπ© ÌÅ¥Î¶≠ ÏΩúÎ∞±
 * @param showQrScanner QR Ïä§Ï∫êÎÑà Î≤ÑÌäº ÌëúÏãú Ïó¨Î∂Ä
 * @param onQrScannerClick QR Ïä§Ï∫êÎÑà Î≤ÑÌäº ÌÅ¥Î¶≠ ÏΩúÎ∞±
 */
@Composable
fun Header(
    title: String,
    showBackButton: Boolean = false,
    onBackClick: (() -> Unit)? = null,
    showBlockchainStatus: Boolean = false,
    activeBlockchainName: String? = null,
    onBlockchainClick: (() -> Unit)? = null,
    showQrScanner: Boolean = false,
    onQrScannerClick: (() -> Unit)? = null
) {
    Surface(
        modifier = Modifier.fillMaxWidth(),
        color = MaterialTheme.colorScheme.background
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .statusBarsPadding()
                .padding(top = 16.dp)
        ) {
            // ÌÉÄÏù¥ÌãÄÍ≥º Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 24.dp)
            ) {
                // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
                if (showBackButton && onBackClick != null) {
                    IconButton(
                        onClick = onBackClick,
                        modifier = Modifier.align(Alignment.CenterStart)
                    ) {
                        Icon(
                            Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞"
                        )
                    }
                }
                
                // ÌÉÄÏù¥ÌãÄ
                Text(
                    text = title,
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onBackground,
                    modifier = Modifier
                        .align(Alignment.CenterStart)
                        .padding(start = if (showBackButton) 48.dp else 0.dp)
                )
                
                // QR Ïä§Ï∫êÎÑà Î≤ÑÌäº
                if (showQrScanner && onQrScannerClick != null) {
                    IconButton(
                        onClick = onQrScannerClick,
                        modifier = Modifier.align(Alignment.CenterEnd)
                    ) {
                        Icon(
                            Icons.Default.QrCodeScanner,
                            contentDescription = "QR Scanner",
                            tint = MaterialTheme.colorScheme.onBackground
                        )
                    }
                }
            }
            
            // Î∏îÎ°ùÏ≤¥Ïù∏ ÏÉÅÌÉú ÌëúÏãú (ÏòµÏÖò)
            AnimatedVisibility(
                visible = showBlockchainStatus && !activeBlockchainName.isNullOrEmpty(),
                enter = fadeIn(),
                exit = fadeOut()
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 24.dp, vertical = 8.dp)
                        .padding(bottom = 8.dp)
                ) {
                    BlockchainStatusChip(
                        blockchainName = activeBlockchainName ?: "",
                        onClick = onBlockchainClick
                    )
                }
            }
        }
    }
}

/**
 * Î∏îÎ°ùÏ≤¥Ïù∏ ÌôúÏÑ±Ìôî ÏÉÅÌÉúÎ•º ÌëúÏãúÌïòÎäî Ïπ©
 * 
 * @param blockchainName ÌôúÏÑ± Î∏îÎ°ùÏ≤¥Ïù∏ Ïù¥Î¶Ñ
 * @param onClick ÌÅ¥Î¶≠ ÏΩúÎ∞±
 */
@Composable
private fun BlockchainStatusChip(
    blockchainName: String,
    onClick: (() -> Unit)?
) {
    Card(
        modifier = Modifier
            .height(32.dp)
            .then(
                if (onClick != null) {
                    Modifier.clickable { onClick() }
                } else {
                    Modifier
                }
            ),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
    ) {
        Box(
            modifier = Modifier
                .fillMaxHeight()
                .padding(horizontal = 12.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = "üîó $blockchainName ÌôúÏÑ±ÌôîÎê®",
                fontSize = 12.sp,
                color = MaterialTheme.colorScheme.onPrimaryContainer
            )
        }
    }
}